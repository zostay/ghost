// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: secrets.proto

package http

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Keeper_ListLocations_FullMethodName    = "/ghost.secrets.Keeper/ListLocations"
	Keeper_ListSecrets_FullMethodName      = "/ghost.secrets.Keeper/ListSecrets"
	Keeper_GetSecretsByName_FullMethodName = "/ghost.secrets.Keeper/GetSecretsByName"
	Keeper_GetSecret_FullMethodName        = "/ghost.secrets.Keeper/GetSecret"
	Keeper_SetSecret_FullMethodName        = "/ghost.secrets.Keeper/SetSecret"
	Keeper_CopySecret_FullMethodName       = "/ghost.secrets.Keeper/CopySecret"
	Keeper_MoveSecret_FullMethodName       = "/ghost.secrets.Keeper/MoveSecret"
	Keeper_DeleteSecret_FullMethodName     = "/ghost.secrets.Keeper/DeleteSecret"
	Keeper_GetServiceInfo_FullMethodName   = "/ghost.secrets.Keeper/GetServiceInfo"
)

// KeeperClient is the client API for Keeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeeperClient interface {
	// ListLocations lists all locations where secrets are stored.
	ListLocations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Keeper_ListLocationsClient, error)
	// ListSecrets lists all secrets stored in a location.
	ListSecrets(ctx context.Context, in *Location, opts ...grpc.CallOption) (Keeper_ListSecretsClient, error)
	// GetSecretsByName gets all secrets with a given name.
	GetSecretsByName(ctx context.Context, in *GetSecretsByNameRequest, opts ...grpc.CallOption) (Keeper_GetSecretsByNameClient, error)
	// GetSecret gets a secret by its ID.
	GetSecret(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*Secret, error)
	// SetSecret sets a secret.
	SetSecret(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*Secret, error)
	// CopySecret copies a secret to a new location.
	CopySecret(ctx context.Context, in *ChangeLocationRequest, opts ...grpc.CallOption) (*Secret, error)
	// MoveSecret moves a secret to a new location.
	MoveSecret(ctx context.Context, in *ChangeLocationRequest, opts ...grpc.CallOption) (*Secret, error)
	// DeleteSecret deletes a secret by its ID.
	DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetServiceInfo returns information about the service.
	GetServiceInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceInfo, error)
}

type keeperClient struct {
	cc grpc.ClientConnInterface
}

func NewKeeperClient(cc grpc.ClientConnInterface) KeeperClient {
	return &keeperClient{cc}
}

func (c *keeperClient) ListLocations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Keeper_ListLocationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Keeper_ServiceDesc.Streams[0], Keeper_ListLocations_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &keeperListLocationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Keeper_ListLocationsClient interface {
	Recv() (*Location, error)
	grpc.ClientStream
}

type keeperListLocationsClient struct {
	grpc.ClientStream
}

func (x *keeperListLocationsClient) Recv() (*Location, error) {
	m := new(Location)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *keeperClient) ListSecrets(ctx context.Context, in *Location, opts ...grpc.CallOption) (Keeper_ListSecretsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Keeper_ServiceDesc.Streams[1], Keeper_ListSecrets_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &keeperListSecretsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Keeper_ListSecretsClient interface {
	Recv() (*Secret, error)
	grpc.ClientStream
}

type keeperListSecretsClient struct {
	grpc.ClientStream
}

func (x *keeperListSecretsClient) Recv() (*Secret, error) {
	m := new(Secret)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *keeperClient) GetSecretsByName(ctx context.Context, in *GetSecretsByNameRequest, opts ...grpc.CallOption) (Keeper_GetSecretsByNameClient, error) {
	stream, err := c.cc.NewStream(ctx, &Keeper_ServiceDesc.Streams[2], Keeper_GetSecretsByName_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &keeperGetSecretsByNameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Keeper_GetSecretsByNameClient interface {
	Recv() (*Secret, error)
	grpc.ClientStream
}

type keeperGetSecretsByNameClient struct {
	grpc.ClientStream
}

func (x *keeperGetSecretsByNameClient) Recv() (*Secret, error) {
	m := new(Secret)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *keeperClient) GetSecret(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*Secret, error) {
	out := new(Secret)
	err := c.cc.Invoke(ctx, Keeper_GetSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) SetSecret(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*Secret, error) {
	out := new(Secret)
	err := c.cc.Invoke(ctx, Keeper_SetSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) CopySecret(ctx context.Context, in *ChangeLocationRequest, opts ...grpc.CallOption) (*Secret, error) {
	out := new(Secret)
	err := c.cc.Invoke(ctx, Keeper_CopySecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) MoveSecret(ctx context.Context, in *ChangeLocationRequest, opts ...grpc.CallOption) (*Secret, error) {
	out := new(Secret)
	err := c.cc.Invoke(ctx, Keeper_MoveSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Keeper_DeleteSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) GetServiceInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceInfo, error) {
	out := new(ServiceInfo)
	err := c.cc.Invoke(ctx, Keeper_GetServiceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeeperServer is the server API for Keeper service.
// All implementations must embed UnimplementedKeeperServer
// for forward compatibility
type KeeperServer interface {
	// ListLocations lists all locations where secrets are stored.
	ListLocations(*emptypb.Empty, Keeper_ListLocationsServer) error
	// ListSecrets lists all secrets stored in a location.
	ListSecrets(*Location, Keeper_ListSecretsServer) error
	// GetSecretsByName gets all secrets with a given name.
	GetSecretsByName(*GetSecretsByNameRequest, Keeper_GetSecretsByNameServer) error
	// GetSecret gets a secret by its ID.
	GetSecret(context.Context, *GetSecretRequest) (*Secret, error)
	// SetSecret sets a secret.
	SetSecret(context.Context, *Secret) (*Secret, error)
	// CopySecret copies a secret to a new location.
	CopySecret(context.Context, *ChangeLocationRequest) (*Secret, error)
	// MoveSecret moves a secret to a new location.
	MoveSecret(context.Context, *ChangeLocationRequest) (*Secret, error)
	// DeleteSecret deletes a secret by its ID.
	DeleteSecret(context.Context, *DeleteSecretRequest) (*emptypb.Empty, error)
	// GetServiceInfo returns information about the service.
	GetServiceInfo(context.Context, *emptypb.Empty) (*ServiceInfo, error)
	mustEmbedUnimplementedKeeperServer()
}

// UnimplementedKeeperServer must be embedded to have forward compatible implementations.
type UnimplementedKeeperServer struct {
}

func (UnimplementedKeeperServer) ListLocations(*emptypb.Empty, Keeper_ListLocationsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListLocations not implemented")
}
func (UnimplementedKeeperServer) ListSecrets(*Location, Keeper_ListSecretsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSecrets not implemented")
}
func (UnimplementedKeeperServer) GetSecretsByName(*GetSecretsByNameRequest, Keeper_GetSecretsByNameServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSecretsByName not implemented")
}
func (UnimplementedKeeperServer) GetSecret(context.Context, *GetSecretRequest) (*Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (UnimplementedKeeperServer) SetSecret(context.Context, *Secret) (*Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSecret not implemented")
}
func (UnimplementedKeeperServer) CopySecret(context.Context, *ChangeLocationRequest) (*Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopySecret not implemented")
}
func (UnimplementedKeeperServer) MoveSecret(context.Context, *ChangeLocationRequest) (*Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveSecret not implemented")
}
func (UnimplementedKeeperServer) DeleteSecret(context.Context, *DeleteSecretRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}
func (UnimplementedKeeperServer) GetServiceInfo(context.Context, *emptypb.Empty) (*ServiceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceInfo not implemented")
}
func (UnimplementedKeeperServer) mustEmbedUnimplementedKeeperServer() {}

// UnsafeKeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeeperServer will
// result in compilation errors.
type UnsafeKeeperServer interface {
	mustEmbedUnimplementedKeeperServer()
}

func RegisterKeeperServer(s grpc.ServiceRegistrar, srv KeeperServer) {
	s.RegisterService(&Keeper_ServiceDesc, srv)
}

func _Keeper_ListLocations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KeeperServer).ListLocations(m, &keeperListLocationsServer{stream})
}

type Keeper_ListLocationsServer interface {
	Send(*Location) error
	grpc.ServerStream
}

type keeperListLocationsServer struct {
	grpc.ServerStream
}

func (x *keeperListLocationsServer) Send(m *Location) error {
	return x.ServerStream.SendMsg(m)
}

func _Keeper_ListSecrets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Location)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KeeperServer).ListSecrets(m, &keeperListSecretsServer{stream})
}

type Keeper_ListSecretsServer interface {
	Send(*Secret) error
	grpc.ServerStream
}

type keeperListSecretsServer struct {
	grpc.ServerStream
}

func (x *keeperListSecretsServer) Send(m *Secret) error {
	return x.ServerStream.SendMsg(m)
}

func _Keeper_GetSecretsByName_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSecretsByNameRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KeeperServer).GetSecretsByName(m, &keeperGetSecretsByNameServer{stream})
}

type Keeper_GetSecretsByNameServer interface {
	Send(*Secret) error
	grpc.ServerStream
}

type keeperGetSecretsByNameServer struct {
	grpc.ServerStream
}

func (x *keeperGetSecretsByNameServer) Send(m *Secret) error {
	return x.ServerStream.SendMsg(m)
}

func _Keeper_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_GetSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).GetSecret(ctx, req.(*GetSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_SetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Secret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).SetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_SetSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).SetSecret(ctx, req.(*Secret))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_CopySecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).CopySecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_CopySecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).CopySecret(ctx, req.(*ChangeLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_MoveSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).MoveSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_MoveSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).MoveSecret(ctx, req.(*ChangeLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_DeleteSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).DeleteSecret(ctx, req.(*DeleteSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_GetServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).GetServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_GetServiceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).GetServiceInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Keeper_ServiceDesc is the grpc.ServiceDesc for Keeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Keeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ghost.secrets.Keeper",
	HandlerType: (*KeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSecret",
			Handler:    _Keeper_GetSecret_Handler,
		},
		{
			MethodName: "SetSecret",
			Handler:    _Keeper_SetSecret_Handler,
		},
		{
			MethodName: "CopySecret",
			Handler:    _Keeper_CopySecret_Handler,
		},
		{
			MethodName: "MoveSecret",
			Handler:    _Keeper_MoveSecret_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _Keeper_DeleteSecret_Handler,
		},
		{
			MethodName: "GetServiceInfo",
			Handler:    _Keeper_GetServiceInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListLocations",
			Handler:       _Keeper_ListLocations_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListSecrets",
			Handler:       _Keeper_ListSecrets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSecretsByName",
			Handler:       _Keeper_GetSecretsByName_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "secrets.proto",
}
